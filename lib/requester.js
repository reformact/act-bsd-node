// Generated by CoffeeScript 1.7.1
(function() {
  var Digester, Requester, deferred, needle, parser;

  parser = require('xml2json');

  deferred = require('deferred');

  needle = require('needle');

  Digester = require('./digester');

  module.exports = Requester = (function() {
    function Requester(config) {
      this.config = config;
    }

    Requester.prototype.get = function(obj) {
      var def, digester;
      this.obj = obj;
      def = deferred();
      digester = new Digester(this.config, this.obj);
      needle.get(digester.url, this.response(def));
      return def.promise;
    };

    Requester.prototype.post = function(obj) {
      var def, digester, xml_data;
      this.obj = obj;
      def = deferred();
      digester = new Digester(this.config, this.obj);
      xml_data = this.generate_xml(this.obj.data);
      needle.post(digester.url, xml_data, this.response(def));
      return def.promise;
    };

    Requester.prototype.generate_xml = function(data) {
      return "<?xml version='1.0' encoding='utf-8'?>\n<api>" + (parser.toXml(data)) + "</api>";
    };

    Requester.prototype.response = function(def) {
      return (function(_this) {
        return function(err, resp, body) {
          var _ref, _ref1;
          if (typeof body === 'string') {
            err = body;
          }
          if (err) {
            return def.resolve(new Error(err));
          }
          body = _this.parse(body);
          if (err = body != null ? (_ref = body.api) != null ? (_ref1 = _ref[0]) != null ? _ref1.error : void 0 : void 0 : void 0) {
            return def.resolve(new Error(JSON.stringify(err)));
          } else {
            return def.resolve(body);
          }
        };
      })(this);
    };

    Requester.prototype.parse = function(body) {
      var err, options, toJson;
      toJson = parser.toJson;
      options = {
        object: true,
        arrayNotation: true,
        sanitize: false
      };
      try {
        return toJson(body, options);
      } catch (_error) {
        err = _error;
        return body;
      }
    };

    return Requester;

  })();

}).call(this);
